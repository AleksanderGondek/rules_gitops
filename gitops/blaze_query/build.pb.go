// Code generated by protoc-gen-go. DO NOT EDIT.
// source: onerepo_tools/gitops/build.proto

package blaze_query

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Indicates what to do when a source file is actually a symlink.
type FilesetEntry_SymlinkBehavior int32

const (
	FilesetEntry_COPY        FilesetEntry_SymlinkBehavior = 1
	FilesetEntry_DEREFERENCE FilesetEntry_SymlinkBehavior = 2
)

var FilesetEntry_SymlinkBehavior_name = map[int32]string{
	1: "COPY",
	2: "DEREFERENCE",
}

var FilesetEntry_SymlinkBehavior_value = map[string]int32{
	"COPY":        1,
	"DEREFERENCE": 2,
}

func (x FilesetEntry_SymlinkBehavior) Enum() *FilesetEntry_SymlinkBehavior {
	p := new(FilesetEntry_SymlinkBehavior)
	*p = x
	return p
}

func (x FilesetEntry_SymlinkBehavior) String() string {
	return proto.EnumName(FilesetEntry_SymlinkBehavior_name, int32(x))
}

func (x *FilesetEntry_SymlinkBehavior) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FilesetEntry_SymlinkBehavior_value, data, "FilesetEntry_SymlinkBehavior")
	if err != nil {
		return err
	}
	*x = FilesetEntry_SymlinkBehavior(value)
	return nil
}

func (FilesetEntry_SymlinkBehavior) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{6, 0}
}

// Indicates the type of attribute.
type Attribute_Discriminator int32

const (
	Attribute_INTEGER                      Attribute_Discriminator = 1
	Attribute_STRING                       Attribute_Discriminator = 2
	Attribute_LABEL                        Attribute_Discriminator = 3
	Attribute_OUTPUT                       Attribute_Discriminator = 4
	Attribute_STRING_LIST                  Attribute_Discriminator = 5
	Attribute_LABEL_LIST                   Attribute_Discriminator = 6
	Attribute_OUTPUT_LIST                  Attribute_Discriminator = 7
	Attribute_DISTRIBUTION_SET             Attribute_Discriminator = 8
	Attribute_LICENSE                      Attribute_Discriminator = 9
	Attribute_STRING_DICT                  Attribute_Discriminator = 10
	Attribute_FILESET_ENTRY_LIST           Attribute_Discriminator = 11
	Attribute_LABEL_LIST_DICT              Attribute_Discriminator = 12
	Attribute_STRING_LIST_DICT             Attribute_Discriminator = 13
	Attribute_BOOLEAN                      Attribute_Discriminator = 14
	Attribute_TRISTATE                     Attribute_Discriminator = 15
	Attribute_INTEGER_LIST                 Attribute_Discriminator = 16
	Attribute_UNKNOWN                      Attribute_Discriminator = 18
	Attribute_LABEL_DICT_UNARY             Attribute_Discriminator = 19
	Attribute_SELECTOR_LIST                Attribute_Discriminator = 20
	Attribute_LABEL_KEYED_STRING_DICT      Attribute_Discriminator = 21
	Attribute_DEPRECATED_STRING_DICT_UNARY Attribute_Discriminator = 17
)

var Attribute_Discriminator_name = map[int32]string{
	1:  "INTEGER",
	2:  "STRING",
	3:  "LABEL",
	4:  "OUTPUT",
	5:  "STRING_LIST",
	6:  "LABEL_LIST",
	7:  "OUTPUT_LIST",
	8:  "DISTRIBUTION_SET",
	9:  "LICENSE",
	10: "STRING_DICT",
	11: "FILESET_ENTRY_LIST",
	12: "LABEL_LIST_DICT",
	13: "STRING_LIST_DICT",
	14: "BOOLEAN",
	15: "TRISTATE",
	16: "INTEGER_LIST",
	18: "UNKNOWN",
	19: "LABEL_DICT_UNARY",
	20: "SELECTOR_LIST",
	21: "LABEL_KEYED_STRING_DICT",
	17: "DEPRECATED_STRING_DICT_UNARY",
}

var Attribute_Discriminator_value = map[string]int32{
	"INTEGER":                      1,
	"STRING":                       2,
	"LABEL":                        3,
	"OUTPUT":                       4,
	"STRING_LIST":                  5,
	"LABEL_LIST":                   6,
	"OUTPUT_LIST":                  7,
	"DISTRIBUTION_SET":             8,
	"LICENSE":                      9,
	"STRING_DICT":                  10,
	"FILESET_ENTRY_LIST":           11,
	"LABEL_LIST_DICT":              12,
	"STRING_LIST_DICT":             13,
	"BOOLEAN":                      14,
	"TRISTATE":                     15,
	"INTEGER_LIST":                 16,
	"UNKNOWN":                      18,
	"LABEL_DICT_UNARY":             19,
	"SELECTOR_LIST":                20,
	"LABEL_KEYED_STRING_DICT":      21,
	"DEPRECATED_STRING_DICT_UNARY": 17,
}

func (x Attribute_Discriminator) Enum() *Attribute_Discriminator {
	p := new(Attribute_Discriminator)
	*p = x
	return p
}

func (x Attribute_Discriminator) String() string {
	return proto.EnumName(Attribute_Discriminator_name, int32(x))
}

func (x *Attribute_Discriminator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Attribute_Discriminator_value, data, "Attribute_Discriminator")
	if err != nil {
		return err
	}
	*x = Attribute_Discriminator(value)
	return nil
}

func (Attribute_Discriminator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{7, 0}
}

// Values for the TriState field type.
type Attribute_Tristate int32

const (
	Attribute_NO   Attribute_Tristate = 0
	Attribute_YES  Attribute_Tristate = 1
	Attribute_AUTO Attribute_Tristate = 2
)

var Attribute_Tristate_name = map[int32]string{
	0: "NO",
	1: "YES",
	2: "AUTO",
}

var Attribute_Tristate_value = map[string]int32{
	"NO":   0,
	"YES":  1,
	"AUTO": 2,
}

func (x Attribute_Tristate) Enum() *Attribute_Tristate {
	p := new(Attribute_Tristate)
	*p = x
	return p
}

func (x Attribute_Tristate) String() string {
	return proto.EnumName(Attribute_Tristate_name, int32(x))
}

func (x *Attribute_Tristate) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Attribute_Tristate_value, data, "Attribute_Tristate")
	if err != nil {
		return err
	}
	*x = Attribute_Tristate(value)
	return nil
}

func (Attribute_Tristate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{7, 1}
}

type Target_Discriminator int32

const (
	Target_RULE              Target_Discriminator = 1
	Target_SOURCE_FILE       Target_Discriminator = 2
	Target_GENERATED_FILE    Target_Discriminator = 3
	Target_PACKAGE_GROUP     Target_Discriminator = 4
	Target_ENVIRONMENT_GROUP Target_Discriminator = 5
)

var Target_Discriminator_name = map[int32]string{
	1: "RULE",
	2: "SOURCE_FILE",
	3: "GENERATED_FILE",
	4: "PACKAGE_GROUP",
	5: "ENVIRONMENT_GROUP",
}

var Target_Discriminator_value = map[string]int32{
	"RULE":              1,
	"SOURCE_FILE":       2,
	"GENERATED_FILE":    3,
	"PACKAGE_GROUP":     4,
	"ENVIRONMENT_GROUP": 5,
}

func (x Target_Discriminator) Enum() *Target_Discriminator {
	p := new(Target_Discriminator)
	*p = x
	return p
}

func (x Target_Discriminator) String() string {
	return proto.EnumName(Target_Discriminator_name, int32(x))
}

func (x *Target_Discriminator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Target_Discriminator_value, data, "Target_Discriminator")
	if err != nil {
		return err
	}
	*x = Target_Discriminator(value)
	return nil
}

func (Target_Discriminator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{14, 0}
}

type AllowedRuleClassInfo_AllowedRuleClasses int32

const (
	AllowedRuleClassInfo_ANY       AllowedRuleClassInfo_AllowedRuleClasses = 1
	AllowedRuleClassInfo_SPECIFIED AllowedRuleClassInfo_AllowedRuleClasses = 2
)

var AllowedRuleClassInfo_AllowedRuleClasses_name = map[int32]string{
	1: "ANY",
	2: "SPECIFIED",
}

var AllowedRuleClassInfo_AllowedRuleClasses_value = map[string]int32{
	"ANY":       1,
	"SPECIFIED": 2,
}

func (x AllowedRuleClassInfo_AllowedRuleClasses) Enum() *AllowedRuleClassInfo_AllowedRuleClasses {
	p := new(AllowedRuleClassInfo_AllowedRuleClasses)
	*p = x
	return p
}

func (x AllowedRuleClassInfo_AllowedRuleClasses) String() string {
	return proto.EnumName(AllowedRuleClassInfo_AllowedRuleClasses_name, int32(x))
}

func (x *AllowedRuleClassInfo_AllowedRuleClasses) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AllowedRuleClassInfo_AllowedRuleClasses_value, data, "AllowedRuleClassInfo_AllowedRuleClasses")
	if err != nil {
		return err
	}
	*x = AllowedRuleClassInfo_AllowedRuleClasses(value)
	return nil
}

func (AllowedRuleClassInfo_AllowedRuleClasses) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{16, 0}
}

type License struct {
	LicenseType          []string `protobuf:"bytes,1,rep,name=license_type,json=licenseType" json:"license_type,omitempty"`
	Exception            []string `protobuf:"bytes,2,rep,name=exception" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *License) Reset()         { *m = License{} }
func (m *License) String() string { return proto.CompactTextString(m) }
func (*License) ProtoMessage()    {}
func (*License) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{0}
}

func (m *License) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_License.Unmarshal(m, b)
}
func (m *License) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_License.Marshal(b, m, deterministic)
}
func (m *License) XXX_Merge(src proto.Message) {
	xxx_messageInfo_License.Merge(m, src)
}
func (m *License) XXX_Size() int {
	return xxx_messageInfo_License.Size(m)
}
func (m *License) XXX_DiscardUnknown() {
	xxx_messageInfo_License.DiscardUnknown(m)
}

var xxx_messageInfo_License proto.InternalMessageInfo

func (m *License) GetLicenseType() []string {
	if m != nil {
		return m.LicenseType
	}
	return nil
}

func (m *License) GetException() []string {
	if m != nil {
		return m.Exception
	}
	return nil
}

type StringDictEntry struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringDictEntry) Reset()         { *m = StringDictEntry{} }
func (m *StringDictEntry) String() string { return proto.CompactTextString(m) }
func (*StringDictEntry) ProtoMessage()    {}
func (*StringDictEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{1}
}

func (m *StringDictEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringDictEntry.Unmarshal(m, b)
}
func (m *StringDictEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringDictEntry.Marshal(b, m, deterministic)
}
func (m *StringDictEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringDictEntry.Merge(m, src)
}
func (m *StringDictEntry) XXX_Size() int {
	return xxx_messageInfo_StringDictEntry.Size(m)
}
func (m *StringDictEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_StringDictEntry.DiscardUnknown(m)
}

var xxx_messageInfo_StringDictEntry proto.InternalMessageInfo

func (m *StringDictEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *StringDictEntry) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type LabelDictUnaryEntry struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelDictUnaryEntry) Reset()         { *m = LabelDictUnaryEntry{} }
func (m *LabelDictUnaryEntry) String() string { return proto.CompactTextString(m) }
func (*LabelDictUnaryEntry) ProtoMessage()    {}
func (*LabelDictUnaryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{2}
}

func (m *LabelDictUnaryEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelDictUnaryEntry.Unmarshal(m, b)
}
func (m *LabelDictUnaryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelDictUnaryEntry.Marshal(b, m, deterministic)
}
func (m *LabelDictUnaryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelDictUnaryEntry.Merge(m, src)
}
func (m *LabelDictUnaryEntry) XXX_Size() int {
	return xxx_messageInfo_LabelDictUnaryEntry.Size(m)
}
func (m *LabelDictUnaryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelDictUnaryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LabelDictUnaryEntry proto.InternalMessageInfo

func (m *LabelDictUnaryEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *LabelDictUnaryEntry) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type LabelListDictEntry struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelListDictEntry) Reset()         { *m = LabelListDictEntry{} }
func (m *LabelListDictEntry) String() string { return proto.CompactTextString(m) }
func (*LabelListDictEntry) ProtoMessage()    {}
func (*LabelListDictEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{3}
}

func (m *LabelListDictEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelListDictEntry.Unmarshal(m, b)
}
func (m *LabelListDictEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelListDictEntry.Marshal(b, m, deterministic)
}
func (m *LabelListDictEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelListDictEntry.Merge(m, src)
}
func (m *LabelListDictEntry) XXX_Size() int {
	return xxx_messageInfo_LabelListDictEntry.Size(m)
}
func (m *LabelListDictEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelListDictEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LabelListDictEntry proto.InternalMessageInfo

func (m *LabelListDictEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *LabelListDictEntry) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type LabelKeyedStringDictEntry struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelKeyedStringDictEntry) Reset()         { *m = LabelKeyedStringDictEntry{} }
func (m *LabelKeyedStringDictEntry) String() string { return proto.CompactTextString(m) }
func (*LabelKeyedStringDictEntry) ProtoMessage()    {}
func (*LabelKeyedStringDictEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{4}
}

func (m *LabelKeyedStringDictEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelKeyedStringDictEntry.Unmarshal(m, b)
}
func (m *LabelKeyedStringDictEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelKeyedStringDictEntry.Marshal(b, m, deterministic)
}
func (m *LabelKeyedStringDictEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelKeyedStringDictEntry.Merge(m, src)
}
func (m *LabelKeyedStringDictEntry) XXX_Size() int {
	return xxx_messageInfo_LabelKeyedStringDictEntry.Size(m)
}
func (m *LabelKeyedStringDictEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelKeyedStringDictEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LabelKeyedStringDictEntry proto.InternalMessageInfo

func (m *LabelKeyedStringDictEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *LabelKeyedStringDictEntry) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type StringListDictEntry struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringListDictEntry) Reset()         { *m = StringListDictEntry{} }
func (m *StringListDictEntry) String() string { return proto.CompactTextString(m) }
func (*StringListDictEntry) ProtoMessage()    {}
func (*StringListDictEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{5}
}

func (m *StringListDictEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringListDictEntry.Unmarshal(m, b)
}
func (m *StringListDictEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringListDictEntry.Marshal(b, m, deterministic)
}
func (m *StringListDictEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringListDictEntry.Merge(m, src)
}
func (m *StringListDictEntry) XXX_Size() int {
	return xxx_messageInfo_StringListDictEntry.Size(m)
}
func (m *StringListDictEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_StringListDictEntry.DiscardUnknown(m)
}

var xxx_messageInfo_StringListDictEntry proto.InternalMessageInfo

func (m *StringListDictEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *StringListDictEntry) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

// Represents an entry attribute of a Fileset rule in a build file.
type FilesetEntry struct {
	// The label pointing to the source target where files are copied from.
	Source *string `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	// The relative path within the fileset rule where files will be mapped.
	DestinationDirectory *string `protobuf:"bytes,2,req,name=destination_directory,json=destinationDirectory" json:"destination_directory,omitempty"`
	// Whether the files= attribute was specified. This is necessary because
	// no files= attribute and files=[] mean different things.
	FilesPresent *bool `protobuf:"varint,7,opt,name=files_present,json=filesPresent" json:"files_present,omitempty"`
	// A list of file labels to include from the source directory.
	File []string `protobuf:"bytes,3,rep,name=file" json:"file,omitempty"`
	// If this is a fileset entry representing files within the rule
	// package, this lists relative paths to files that should be excluded from
	// the set.  This cannot contain values if 'file' also has values.
	Exclude []string `protobuf:"bytes,4,rep,name=exclude" json:"exclude,omitempty"`
	// This field is optional because there will be some time when the new
	// PB is used by tools depending on blaze query, but the new blaze version
	// is not yet released.
	// TODO(bazel-team): Make this field required once a version of Blaze is
	// released that outputs this field.
	SymlinkBehavior *FilesetEntry_SymlinkBehavior `protobuf:"varint,5,opt,name=symlink_behavior,json=symlinkBehavior,enum=blaze_query.FilesetEntry_SymlinkBehavior,def=1" json:"symlink_behavior,omitempty"`
	// The prefix to strip from the path of the files in this FilesetEntry. Note
	// that no value and the empty string as the value mean different things here.
	StripPrefix          *string  `protobuf:"bytes,6,opt,name=strip_prefix,json=stripPrefix" json:"strip_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilesetEntry) Reset()         { *m = FilesetEntry{} }
func (m *FilesetEntry) String() string { return proto.CompactTextString(m) }
func (*FilesetEntry) ProtoMessage()    {}
func (*FilesetEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{6}
}

func (m *FilesetEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesetEntry.Unmarshal(m, b)
}
func (m *FilesetEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesetEntry.Marshal(b, m, deterministic)
}
func (m *FilesetEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesetEntry.Merge(m, src)
}
func (m *FilesetEntry) XXX_Size() int {
	return xxx_messageInfo_FilesetEntry.Size(m)
}
func (m *FilesetEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesetEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FilesetEntry proto.InternalMessageInfo

const Default_FilesetEntry_SymlinkBehavior FilesetEntry_SymlinkBehavior = FilesetEntry_COPY

func (m *FilesetEntry) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *FilesetEntry) GetDestinationDirectory() string {
	if m != nil && m.DestinationDirectory != nil {
		return *m.DestinationDirectory
	}
	return ""
}

func (m *FilesetEntry) GetFilesPresent() bool {
	if m != nil && m.FilesPresent != nil {
		return *m.FilesPresent
	}
	return false
}

func (m *FilesetEntry) GetFile() []string {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FilesetEntry) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *FilesetEntry) GetSymlinkBehavior() FilesetEntry_SymlinkBehavior {
	if m != nil && m.SymlinkBehavior != nil {
		return *m.SymlinkBehavior
	}
	return Default_FilesetEntry_SymlinkBehavior
}

func (m *FilesetEntry) GetStripPrefix() string {
	if m != nil && m.StripPrefix != nil {
		return *m.StripPrefix
	}
	return ""
}

// A rule attribute. Each attribute must have a type and one of the various
// value fields populated - for the most part.
//
// Attributes of BOOLEAN and TRISTATE type may set all of the int, bool, and
// string values for backwards compatibility with clients that expect them to
// be set.
//
// Attributes of INTEGER, STRING, LABEL, LICENSE, BOOLEAN, and TRISTATE type
// may set *none* of the values. This can happen if the Attribute message is
// prepared for a client that doesn't support SELECTOR_LIST, but the rule has
// a selector list value for the attribute. (Selector lists for attributes of
// other types--the collection types--are handled differently when prepared
// for such a client. The possible collection values are gathered together
// and flattened.)
//
// By checking the type, the appropriate value can be extracted - see the
// comments on each type for the associated value.  The order of lists comes
// from the blaze parsing. If an attribute is of a list type, the associated
// list should never be empty.
type Attribute struct {
	// The name of the attribute
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Whether the attribute was explicitly specified
	ExplicitlySpecified *bool `protobuf:"varint,13,opt,name=explicitly_specified,json=explicitlySpecified" json:"explicitly_specified,omitempty"`
	// If this attribute has a string value or a string list value, then this
	// may be set to indicate that the value may be treated as a label that
	// isn't a dependency of this attribute's rule.
	Nodep *bool `protobuf:"varint,20,opt,name=nodep" json:"nodep,omitempty"`
	// The type of attribute.  This message is used for all of the different
	// attribute types so the discriminator helps for figuring out what is
	// stored in the message.
	Type *Attribute_Discriminator `protobuf:"varint,2,req,name=type,enum=blaze_query.Attribute_Discriminator" json:"type,omitempty"`
	// If this attribute has an integer value this will be populated.
	// Boolean and TriState also use this field as [0,1] and [-1,0,1]
	// for [false, true] and [auto, no, yes] respectively.
	IntValue *int32 `protobuf:"varint,3,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	// If the attribute has a string value this will be populated.  Label and
	// path attributes use this field as the value even though the type may
	// be LABEL or something else other than STRING.
	StringValue *string `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	// If the attribute has a boolean value this will be populated.
	BooleanValue *bool `protobuf:"varint,14,opt,name=boolean_value,json=booleanValue" json:"boolean_value,omitempty"`
	// If the attribute is a Tristate value, this will be populated.
	TristateValue *Attribute_Tristate `protobuf:"varint,15,opt,name=tristate_value,json=tristateValue,enum=blaze_query.Attribute_Tristate" json:"tristate_value,omitempty"`
	// The value of the attribute has a list of string values (label and path
	// note from STRING applies here as well).
	StringListValue []string `protobuf:"bytes,6,rep,name=string_list_value,json=stringListValue" json:"string_list_value,omitempty"`
	// If this is a license attribute, the license information is stored here.
	License *License `protobuf:"bytes,7,opt,name=license" json:"license,omitempty"`
	// If this is a string dict, each entry will be stored here.
	StringDictValue []*StringDictEntry `protobuf:"bytes,8,rep,name=string_dict_value,json=stringDictValue" json:"string_dict_value,omitempty"`
	// If the attribute is part of a Fileset, the fileset entries are stored in
	// this field.
	FilesetListValue []*FilesetEntry `protobuf:"bytes,9,rep,name=fileset_list_value,json=filesetListValue" json:"fileset_list_value,omitempty"`
	// If this is a label list dict, each entry will be stored here.
	LabelListDictValue []*LabelListDictEntry `protobuf:"bytes,10,rep,name=label_list_dict_value,json=labelListDictValue" json:"label_list_dict_value,omitempty"`
	// If this is a string list dict, each entry will be stored here.
	StringListDictValue []*StringListDictEntry `protobuf:"bytes,11,rep,name=string_list_dict_value,json=stringListDictValue" json:"string_list_dict_value,omitempty"`
	// The value of the attribute has a list of int32 values
	IntListValue []int32 `protobuf:"varint,17,rep,name=int_list_value,json=intListValue" json:"int_list_value,omitempty"`
	// If this is a label dict unary, each entry will be stored here.
	LabelDictUnaryValue []*LabelDictUnaryEntry `protobuf:"bytes,19,rep,name=label_dict_unary_value,json=labelDictUnaryValue" json:"label_dict_unary_value,omitempty"`
	// If this is a label-keyed string dict, each entry will be stored here.
	LabelKeyedStringDictValue []*LabelKeyedStringDictEntry `protobuf:"bytes,22,rep,name=label_keyed_string_dict_value,json=labelKeyedStringDictValue" json:"label_keyed_string_dict_value,omitempty"`
	// If this attribute's value is an expression containing one or more select
	// expressions, then its type is SELECTOR_LIST and a SelectorList will be
	// stored here.
	SelectorList                   *Attribute_SelectorList `protobuf:"bytes,21,opt,name=selector_list,json=selectorList" json:"selector_list,omitempty"`
	DEPRECATEDStringDictUnaryValue [][]byte                `protobuf:"bytes,18,rep,name=DEPRECATED_string_dict_unary_value,json=DEPRECATEDStringDictUnaryValue" json:"DEPRECATED_string_dict_unary_value,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                `json:"-"`
	XXX_unrecognized               []byte                  `json:"-"`
	XXX_sizecache                  int32                   `json:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{7}
}

func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribute.Unmarshal(m, b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return xxx_messageInfo_Attribute.Size(m)
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Attribute) GetExplicitlySpecified() bool {
	if m != nil && m.ExplicitlySpecified != nil {
		return *m.ExplicitlySpecified
	}
	return false
}

func (m *Attribute) GetNodep() bool {
	if m != nil && m.Nodep != nil {
		return *m.Nodep
	}
	return false
}

func (m *Attribute) GetType() Attribute_Discriminator {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Attribute_INTEGER
}

func (m *Attribute) GetIntValue() int32 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *Attribute) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *Attribute) GetBooleanValue() bool {
	if m != nil && m.BooleanValue != nil {
		return *m.BooleanValue
	}
	return false
}

func (m *Attribute) GetTristateValue() Attribute_Tristate {
	if m != nil && m.TristateValue != nil {
		return *m.TristateValue
	}
	return Attribute_NO
}

func (m *Attribute) GetStringListValue() []string {
	if m != nil {
		return m.StringListValue
	}
	return nil
}

func (m *Attribute) GetLicense() *License {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *Attribute) GetStringDictValue() []*StringDictEntry {
	if m != nil {
		return m.StringDictValue
	}
	return nil
}

func (m *Attribute) GetFilesetListValue() []*FilesetEntry {
	if m != nil {
		return m.FilesetListValue
	}
	return nil
}

func (m *Attribute) GetLabelListDictValue() []*LabelListDictEntry {
	if m != nil {
		return m.LabelListDictValue
	}
	return nil
}

func (m *Attribute) GetStringListDictValue() []*StringListDictEntry {
	if m != nil {
		return m.StringListDictValue
	}
	return nil
}

func (m *Attribute) GetIntListValue() []int32 {
	if m != nil {
		return m.IntListValue
	}
	return nil
}

func (m *Attribute) GetLabelDictUnaryValue() []*LabelDictUnaryEntry {
	if m != nil {
		return m.LabelDictUnaryValue
	}
	return nil
}

func (m *Attribute) GetLabelKeyedStringDictValue() []*LabelKeyedStringDictEntry {
	if m != nil {
		return m.LabelKeyedStringDictValue
	}
	return nil
}

func (m *Attribute) GetSelectorList() *Attribute_SelectorList {
	if m != nil {
		return m.SelectorList
	}
	return nil
}

func (m *Attribute) GetDEPRECATEDStringDictUnaryValue() [][]byte {
	if m != nil {
		return m.DEPRECATEDStringDictUnaryValue
	}
	return nil
}

type Attribute_SelectorEntry struct {
	// The key of the selector entry. At this time, this is the label of a
	// config_setting rule, or the pseudo-label "//conditions:default".
	Label *string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// True if the entry's value is the default value for the type as a
	// result of the condition value being specified as None (ie:
	// {"//condition": None}).
	IsDefaultValue *bool `protobuf:"varint,16,opt,name=is_default_value,json=isDefaultValue" json:"is_default_value,omitempty"`
	// Exactly one of the following fields (except for glob_criteria) must be
	// populated - note that the BOOLEAN and TRISTATE caveat in Attribute's
	// comment does not apply here. The type field in the SelectorList
	// containing this entry indicates which of these fields is populated,
	// in accordance with the comments on Discriminator enum values above.
	// (To be explicit: BOOLEAN populates the boolean_value field and TRISTATE
	// populates the tristate_value field.)
	IntValue                       *int32                       `protobuf:"varint,2,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	StringValue                    *string                      `protobuf:"bytes,3,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BooleanValue                   *bool                        `protobuf:"varint,4,opt,name=boolean_value,json=booleanValue" json:"boolean_value,omitempty"`
	TristateValue                  *Attribute_Tristate          `protobuf:"varint,5,opt,name=tristate_value,json=tristateValue,enum=blaze_query.Attribute_Tristate" json:"tristate_value,omitempty"`
	StringListValue                []string                     `protobuf:"bytes,6,rep,name=string_list_value,json=stringListValue" json:"string_list_value,omitempty"`
	License                        *License                     `protobuf:"bytes,7,opt,name=license" json:"license,omitempty"`
	StringDictValue                []*StringDictEntry           `protobuf:"bytes,8,rep,name=string_dict_value,json=stringDictValue" json:"string_dict_value,omitempty"`
	FilesetListValue               []*FilesetEntry              `protobuf:"bytes,9,rep,name=fileset_list_value,json=filesetListValue" json:"fileset_list_value,omitempty"`
	LabelListDictValue             []*LabelListDictEntry        `protobuf:"bytes,10,rep,name=label_list_dict_value,json=labelListDictValue" json:"label_list_dict_value,omitempty"`
	StringListDictValue            []*StringListDictEntry       `protobuf:"bytes,11,rep,name=string_list_dict_value,json=stringListDictValue" json:"string_list_dict_value,omitempty"`
	IntListValue                   []int32                      `protobuf:"varint,13,rep,name=int_list_value,json=intListValue" json:"int_list_value,omitempty"`
	LabelDictUnaryValue            []*LabelDictUnaryEntry       `protobuf:"bytes,15,rep,name=label_dict_unary_value,json=labelDictUnaryValue" json:"label_dict_unary_value,omitempty"`
	LabelKeyedStringDictValue      []*LabelKeyedStringDictEntry `protobuf:"bytes,17,rep,name=label_keyed_string_dict_value,json=labelKeyedStringDictValue" json:"label_keyed_string_dict_value,omitempty"`
	DEPRECATEDStringDictUnaryValue [][]byte                     `protobuf:"bytes,14,rep,name=DEPRECATED_string_dict_unary_value,json=DEPRECATEDStringDictUnaryValue" json:"DEPRECATED_string_dict_unary_value,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                     `json:"-"`
	XXX_unrecognized               []byte                       `json:"-"`
	XXX_sizecache                  int32                        `json:"-"`
}

func (m *Attribute_SelectorEntry) Reset()         { *m = Attribute_SelectorEntry{} }
func (m *Attribute_SelectorEntry) String() string { return proto.CompactTextString(m) }
func (*Attribute_SelectorEntry) ProtoMessage()    {}
func (*Attribute_SelectorEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{7, 0}
}

func (m *Attribute_SelectorEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribute_SelectorEntry.Unmarshal(m, b)
}
func (m *Attribute_SelectorEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribute_SelectorEntry.Marshal(b, m, deterministic)
}
func (m *Attribute_SelectorEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute_SelectorEntry.Merge(m, src)
}
func (m *Attribute_SelectorEntry) XXX_Size() int {
	return xxx_messageInfo_Attribute_SelectorEntry.Size(m)
}
func (m *Attribute_SelectorEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute_SelectorEntry.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute_SelectorEntry proto.InternalMessageInfo

func (m *Attribute_SelectorEntry) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Attribute_SelectorEntry) GetIsDefaultValue() bool {
	if m != nil && m.IsDefaultValue != nil {
		return *m.IsDefaultValue
	}
	return false
}

func (m *Attribute_SelectorEntry) GetIntValue() int32 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *Attribute_SelectorEntry) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *Attribute_SelectorEntry) GetBooleanValue() bool {
	if m != nil && m.BooleanValue != nil {
		return *m.BooleanValue
	}
	return false
}

func (m *Attribute_SelectorEntry) GetTristateValue() Attribute_Tristate {
	if m != nil && m.TristateValue != nil {
		return *m.TristateValue
	}
	return Attribute_NO
}

func (m *Attribute_SelectorEntry) GetStringListValue() []string {
	if m != nil {
		return m.StringListValue
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetLicense() *License {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetStringDictValue() []*StringDictEntry {
	if m != nil {
		return m.StringDictValue
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetFilesetListValue() []*FilesetEntry {
	if m != nil {
		return m.FilesetListValue
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetLabelListDictValue() []*LabelListDictEntry {
	if m != nil {
		return m.LabelListDictValue
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetStringListDictValue() []*StringListDictEntry {
	if m != nil {
		return m.StringListDictValue
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetIntListValue() []int32 {
	if m != nil {
		return m.IntListValue
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetLabelDictUnaryValue() []*LabelDictUnaryEntry {
	if m != nil {
		return m.LabelDictUnaryValue
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetLabelKeyedStringDictValue() []*LabelKeyedStringDictEntry {
	if m != nil {
		return m.LabelKeyedStringDictValue
	}
	return nil
}

func (m *Attribute_SelectorEntry) GetDEPRECATEDStringDictUnaryValue() [][]byte {
	if m != nil {
		return m.DEPRECATEDStringDictUnaryValue
	}
	return nil
}

type Attribute_Selector struct {
	// The list of (label, value) pairs in the map that defines the selector.
	// At this time, this cannot be empty, i.e. a selector has at least one
	// entry.
	Entries []*Attribute_SelectorEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	// Whether or not this has any default values.
	HasDefaultValue *bool `protobuf:"varint,2,opt,name=has_default_value,json=hasDefaultValue" json:"has_default_value,omitempty"`
	// The error message when no condition matches.
	NoMatchError         *string  `protobuf:"bytes,3,opt,name=no_match_error,json=noMatchError" json:"no_match_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attribute_Selector) Reset()         { *m = Attribute_Selector{} }
func (m *Attribute_Selector) String() string { return proto.CompactTextString(m) }
func (*Attribute_Selector) ProtoMessage()    {}
func (*Attribute_Selector) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{7, 1}
}

func (m *Attribute_Selector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribute_Selector.Unmarshal(m, b)
}
func (m *Attribute_Selector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribute_Selector.Marshal(b, m, deterministic)
}
func (m *Attribute_Selector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute_Selector.Merge(m, src)
}
func (m *Attribute_Selector) XXX_Size() int {
	return xxx_messageInfo_Attribute_Selector.Size(m)
}
func (m *Attribute_Selector) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute_Selector.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute_Selector proto.InternalMessageInfo

func (m *Attribute_Selector) GetEntries() []*Attribute_SelectorEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Attribute_Selector) GetHasDefaultValue() bool {
	if m != nil && m.HasDefaultValue != nil {
		return *m.HasDefaultValue
	}
	return false
}

func (m *Attribute_Selector) GetNoMatchError() string {
	if m != nil && m.NoMatchError != nil {
		return *m.NoMatchError
	}
	return ""
}

type Attribute_SelectorList struct {
	// The type that this selector list evaluates to, and the type that each
	// selector in the list evaluates to. At this time, this cannot be
	// SELECTOR_LIST, i.e. selector lists do not nest.
	Type *Attribute_Discriminator `protobuf:"varint,1,opt,name=type,enum=blaze_query.Attribute_Discriminator" json:"type,omitempty"`
	// The list of selector elements in this selector list. At this time, this
	// cannot be empty, i.e. a selector list is never empty.
	Elements             []*Attribute_Selector `protobuf:"bytes,2,rep,name=elements" json:"elements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Attribute_SelectorList) Reset()         { *m = Attribute_SelectorList{} }
func (m *Attribute_SelectorList) String() string { return proto.CompactTextString(m) }
func (*Attribute_SelectorList) ProtoMessage()    {}
func (*Attribute_SelectorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{7, 2}
}

func (m *Attribute_SelectorList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribute_SelectorList.Unmarshal(m, b)
}
func (m *Attribute_SelectorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribute_SelectorList.Marshal(b, m, deterministic)
}
func (m *Attribute_SelectorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute_SelectorList.Merge(m, src)
}
func (m *Attribute_SelectorList) XXX_Size() int {
	return xxx_messageInfo_Attribute_SelectorList.Size(m)
}
func (m *Attribute_SelectorList) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute_SelectorList.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute_SelectorList proto.InternalMessageInfo

func (m *Attribute_SelectorList) GetType() Attribute_Discriminator {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Attribute_INTEGER
}

func (m *Attribute_SelectorList) GetElements() []*Attribute_Selector {
	if m != nil {
		return m.Elements
	}
	return nil
}

// A rule instance (e.g., cc_library foo, java_binary bar).
type Rule struct {
	// The name of the rule (formatted as an absolute label, e.g. //foo/bar:baz).
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The rule class (e.g., java_library)
	RuleClass *string `protobuf:"bytes,2,req,name=rule_class,json=ruleClass" json:"rule_class,omitempty"`
	// The BUILD file and line number of the location (formatted as
	// <absolute_path>:<line_number>) in the rule's package's BUILD file where the
	// rule instance was instantiated. The line number will be that of a rule
	// invocation or macro call (that in turn invoked a rule). See
	// https://docs.bazel.build/versions/master/skylark/macros.html#macro-creation
	Location *string `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// All of the attributes that describe the rule.
	Attribute []*Attribute `protobuf:"bytes,4,rep,name=attribute" json:"attribute,omitempty"`
	// All of the inputs to the rule (formatted as absolute labels). These are
	// predecessors in the dependency graph.
	RuleInput []string `protobuf:"bytes,5,rep,name=rule_input,json=ruleInput" json:"rule_input,omitempty"`
	// All of the outputs of the rule (formatted as absolute labels). These are
	// successors in the dependency graph.
	RuleOutput []string `protobuf:"bytes,6,rep,name=rule_output,json=ruleOutput" json:"rule_output,omitempty"`
	// The set of all "features" inherited from the rule's package declaration.
	DefaultSetting []string `protobuf:"bytes,7,rep,name=default_setting,json=defaultSetting" json:"default_setting,omitempty"`
	// The rule's class's public by default value.
	PublicByDefault *bool `protobuf:"varint,9,opt,name=public_by_default,json=publicByDefault" json:"public_by_default,omitempty"`
	// If this rule is of a skylark-defined RuleClass.
	IsSkylark *bool `protobuf:"varint,10,opt,name=is_skylark,json=isSkylark" json:"is_skylark,omitempty"`
	// Hash encapsulating the behavior of this Skylark rule. Any change to this
	// rule's definition that could change its behavior will be reflected here.
	SkylarkEnvironmentHashCode *string  `protobuf:"bytes,12,opt,name=skylark_environment_hash_code,json=skylarkEnvironmentHashCode" json:"skylark_environment_hash_code,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{8}
}

func (m *Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rule.Unmarshal(m, b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return xxx_messageInfo_Rule.Size(m)
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Rule) GetRuleClass() string {
	if m != nil && m.RuleClass != nil {
		return *m.RuleClass
	}
	return ""
}

func (m *Rule) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *Rule) GetAttribute() []*Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *Rule) GetRuleInput() []string {
	if m != nil {
		return m.RuleInput
	}
	return nil
}

func (m *Rule) GetRuleOutput() []string {
	if m != nil {
		return m.RuleOutput
	}
	return nil
}

func (m *Rule) GetDefaultSetting() []string {
	if m != nil {
		return m.DefaultSetting
	}
	return nil
}

func (m *Rule) GetPublicByDefault() bool {
	if m != nil && m.PublicByDefault != nil {
		return *m.PublicByDefault
	}
	return false
}

func (m *Rule) GetIsSkylark() bool {
	if m != nil && m.IsSkylark != nil {
		return *m.IsSkylark
	}
	return false
}

func (m *Rule) GetSkylarkEnvironmentHashCode() string {
	if m != nil && m.SkylarkEnvironmentHashCode != nil {
		return *m.SkylarkEnvironmentHashCode
	}
	return ""
}

// Summary of all transitive dependencies of 'rule,' where each dependent
// rule is included only once in the 'dependency' field.  Gives complete
// information to analyze the single build target labeled rule.name,
// including optional location of target in BUILD file.
type RuleSummary struct {
	Rule                 *Rule    `protobuf:"bytes,1,req,name=rule" json:"rule,omitempty"`
	Dependency           []*Rule  `protobuf:"bytes,2,rep,name=dependency" json:"dependency,omitempty"`
	Location             *string  `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleSummary) Reset()         { *m = RuleSummary{} }
func (m *RuleSummary) String() string { return proto.CompactTextString(m) }
func (*RuleSummary) ProtoMessage()    {}
func (*RuleSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{9}
}

func (m *RuleSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleSummary.Unmarshal(m, b)
}
func (m *RuleSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleSummary.Marshal(b, m, deterministic)
}
func (m *RuleSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleSummary.Merge(m, src)
}
func (m *RuleSummary) XXX_Size() int {
	return xxx_messageInfo_RuleSummary.Size(m)
}
func (m *RuleSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RuleSummary proto.InternalMessageInfo

func (m *RuleSummary) GetRule() *Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *RuleSummary) GetDependency() []*Rule {
	if m != nil {
		return m.Dependency
	}
	return nil
}

func (m *RuleSummary) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

// A package group. Aside from the name, it contains the list of packages
// present in the group (as specified in the BUILD file).
type PackageGroup struct {
	// The name of the package group
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The list of packages as specified in the BUILD file. Currently this is
	// only a list of packages, but some time in the future, there might be
	// some type of wildcard mechanism.
	ContainedPackage []string `protobuf:"bytes,2,rep,name=contained_package,json=containedPackage" json:"contained_package,omitempty"`
	// The list of sub package groups included in this one.
	IncludedPackageGroup []string `protobuf:"bytes,3,rep,name=included_package_group,json=includedPackageGroup" json:"included_package_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageGroup) Reset()         { *m = PackageGroup{} }
func (m *PackageGroup) String() string { return proto.CompactTextString(m) }
func (*PackageGroup) ProtoMessage()    {}
func (*PackageGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{10}
}

func (m *PackageGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageGroup.Unmarshal(m, b)
}
func (m *PackageGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageGroup.Marshal(b, m, deterministic)
}
func (m *PackageGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageGroup.Merge(m, src)
}
func (m *PackageGroup) XXX_Size() int {
	return xxx_messageInfo_PackageGroup.Size(m)
}
func (m *PackageGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageGroup.DiscardUnknown(m)
}

var xxx_messageInfo_PackageGroup proto.InternalMessageInfo

func (m *PackageGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PackageGroup) GetContainedPackage() []string {
	if m != nil {
		return m.ContainedPackage
	}
	return nil
}

func (m *PackageGroup) GetIncludedPackageGroup() []string {
	if m != nil {
		return m.IncludedPackageGroup
	}
	return nil
}

// An environment group.
type EnvironmentGroup struct {
	// The name of the environment group.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The environments that belong to this group (as labels).
	Environment []string `protobuf:"bytes,2,rep,name=environment" json:"environment,omitempty"`
	// The member environments that rules implicitly support if not otherwise
	// specified.
	Default              []string `protobuf:"bytes,3,rep,name=default" json:"default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentGroup) Reset()         { *m = EnvironmentGroup{} }
func (m *EnvironmentGroup) String() string { return proto.CompactTextString(m) }
func (*EnvironmentGroup) ProtoMessage()    {}
func (*EnvironmentGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{11}
}

func (m *EnvironmentGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentGroup.Unmarshal(m, b)
}
func (m *EnvironmentGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentGroup.Marshal(b, m, deterministic)
}
func (m *EnvironmentGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentGroup.Merge(m, src)
}
func (m *EnvironmentGroup) XXX_Size() int {
	return xxx_messageInfo_EnvironmentGroup.Size(m)
}
func (m *EnvironmentGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentGroup proto.InternalMessageInfo

func (m *EnvironmentGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EnvironmentGroup) GetEnvironment() []string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *EnvironmentGroup) GetDefault() []string {
	if m != nil {
		return m.Default
	}
	return nil
}

// A file that is an input into the build system.
// Next-Id: 10
type SourceFile struct {
	// The name of the source file (a label).
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The location of the source file.  This is a path with line numbers, not
	// a label in the build system.
	Location *string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	// Labels of .bzl (Skylark) files that are transitively loaded in this BUILD
	// file. This is present only when the SourceFile represents a BUILD file that
	// loaded .bzl files.
	// TODO(bazel-team): Rename this field.
	Subinclude []string `protobuf:"bytes,3,rep,name=subinclude" json:"subinclude,omitempty"`
	// Labels of package groups that are mentioned in the visibility declaration
	// for this source file.
	PackageGroup []string `protobuf:"bytes,4,rep,name=package_group,json=packageGroup" json:"package_group,omitempty"`
	// Labels mentioned in the visibility declaration (including :__pkg__ and
	// //visibility: ones)
	VisibilityLabel []string `protobuf:"bytes,5,rep,name=visibility_label,json=visibilityLabel" json:"visibility_label,omitempty"`
	// The package-level features enabled for this package. Only present if the
	// SourceFile represents a BUILD file.
	Feature []string `protobuf:"bytes,6,rep,name=feature" json:"feature,omitempty"`
	// License attribute for the file.
	License *License `protobuf:"bytes,8,opt,name=license" json:"license,omitempty"`
	// True if the package contains an error. Only present if the SourceFile
	// represents a BUILD file.
	PackageContainsErrors *bool    `protobuf:"varint,9,opt,name=package_contains_errors,json=packageContainsErrors" json:"package_contains_errors,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SourceFile) Reset()         { *m = SourceFile{} }
func (m *SourceFile) String() string { return proto.CompactTextString(m) }
func (*SourceFile) ProtoMessage()    {}
func (*SourceFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{12}
}

func (m *SourceFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceFile.Unmarshal(m, b)
}
func (m *SourceFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceFile.Marshal(b, m, deterministic)
}
func (m *SourceFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceFile.Merge(m, src)
}
func (m *SourceFile) XXX_Size() int {
	return xxx_messageInfo_SourceFile.Size(m)
}
func (m *SourceFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceFile.DiscardUnknown(m)
}

var xxx_messageInfo_SourceFile proto.InternalMessageInfo

func (m *SourceFile) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SourceFile) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *SourceFile) GetSubinclude() []string {
	if m != nil {
		return m.Subinclude
	}
	return nil
}

func (m *SourceFile) GetPackageGroup() []string {
	if m != nil {
		return m.PackageGroup
	}
	return nil
}

func (m *SourceFile) GetVisibilityLabel() []string {
	if m != nil {
		return m.VisibilityLabel
	}
	return nil
}

func (m *SourceFile) GetFeature() []string {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (m *SourceFile) GetLicense() *License {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *SourceFile) GetPackageContainsErrors() bool {
	if m != nil && m.PackageContainsErrors != nil {
		return *m.PackageContainsErrors
	}
	return false
}

// A file that is the output of a build rule.
type GeneratedFile struct {
	// The name of the generated file (a label).
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The label of the target that generates the file.
	GeneratingRule *string `protobuf:"bytes,2,req,name=generating_rule,json=generatingRule" json:"generating_rule,omitempty"`
	// The path of the output file (not a label).
	Location             *string  `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeneratedFile) Reset()         { *m = GeneratedFile{} }
func (m *GeneratedFile) String() string { return proto.CompactTextString(m) }
func (*GeneratedFile) ProtoMessage()    {}
func (*GeneratedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{13}
}

func (m *GeneratedFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeneratedFile.Unmarshal(m, b)
}
func (m *GeneratedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeneratedFile.Marshal(b, m, deterministic)
}
func (m *GeneratedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneratedFile.Merge(m, src)
}
func (m *GeneratedFile) XXX_Size() int {
	return xxx_messageInfo_GeneratedFile.Size(m)
}
func (m *GeneratedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneratedFile.DiscardUnknown(m)
}

var xxx_messageInfo_GeneratedFile proto.InternalMessageInfo

func (m *GeneratedFile) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GeneratedFile) GetGeneratingRule() string {
	if m != nil && m.GeneratingRule != nil {
		return *m.GeneratingRule
	}
	return ""
}

func (m *GeneratedFile) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

// A target from a blaze query execution.  Similar to the Attribute message,
// the Discriminator is used to determine which field contains information.
// For any given type, only one of these can be populated in a single Target.
type Target struct {
	// The type of target contained in the message.
	Type *Target_Discriminator `protobuf:"varint,1,req,name=type,enum=blaze_query.Target_Discriminator" json:"type,omitempty"`
	// If this target represents a rule, the rule is stored here.
	Rule *Rule `protobuf:"bytes,2,opt,name=rule" json:"rule,omitempty"`
	// A file that is not generated by the build system (version controlled
	// or created by the test harness).
	SourceFile *SourceFile `protobuf:"bytes,3,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	// A generated file that is the output of a rule.
	GeneratedFile *GeneratedFile `protobuf:"bytes,4,opt,name=generated_file,json=generatedFile" json:"generated_file,omitempty"`
	// A package group.
	PackageGroup *PackageGroup `protobuf:"bytes,5,opt,name=package_group,json=packageGroup" json:"package_group,omitempty"`
	// An environment group.
	EnvironmentGroup     *EnvironmentGroup `protobuf:"bytes,6,opt,name=environment_group,json=environmentGroup" json:"environment_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{14}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetType() Target_Discriminator {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Target_RULE
}

func (m *Target) GetRule() *Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *Target) GetSourceFile() *SourceFile {
	if m != nil {
		return m.SourceFile
	}
	return nil
}

func (m *Target) GetGeneratedFile() *GeneratedFile {
	if m != nil {
		return m.GeneratedFile
	}
	return nil
}

func (m *Target) GetPackageGroup() *PackageGroup {
	if m != nil {
		return m.PackageGroup
	}
	return nil
}

func (m *Target) GetEnvironmentGroup() *EnvironmentGroup {
	if m != nil {
		return m.EnvironmentGroup
	}
	return nil
}

// Container for all of the blaze query results.
type QueryResult struct {
	// All of the targets returned by the blaze query.
	Target               []*Target `protobuf:"bytes,1,rep,name=target" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *QueryResult) Reset()         { *m = QueryResult{} }
func (m *QueryResult) String() string { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()    {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{15}
}

func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResult.Unmarshal(m, b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
}
func (m *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(m, src)
}
func (m *QueryResult) XXX_Size() int {
	return xxx_messageInfo_QueryResult.Size(m)
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

func (m *QueryResult) GetTarget() []*Target {
	if m != nil {
		return m.Target
	}
	return nil
}

// Information about allowed rule classes for a specific attribute of a rule.
type AllowedRuleClassInfo struct {
	Policy *AllowedRuleClassInfo_AllowedRuleClasses `protobuf:"varint,1,req,name=policy,enum=blaze_query.AllowedRuleClassInfo_AllowedRuleClasses" json:"policy,omitempty"`
	// Rule class names of rules allowed in this attribute, e.g "cc_library",
	// "py_binary". Only present if the allowed_rule_classes field is set to
	// SPECIFIED.
	AllowedRuleClass     []string `protobuf:"bytes,2,rep,name=allowed_rule_class,json=allowedRuleClass" json:"allowed_rule_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedRuleClassInfo) Reset()         { *m = AllowedRuleClassInfo{} }
func (m *AllowedRuleClassInfo) String() string { return proto.CompactTextString(m) }
func (*AllowedRuleClassInfo) ProtoMessage()    {}
func (*AllowedRuleClassInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{16}
}

func (m *AllowedRuleClassInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedRuleClassInfo.Unmarshal(m, b)
}
func (m *AllowedRuleClassInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedRuleClassInfo.Marshal(b, m, deterministic)
}
func (m *AllowedRuleClassInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedRuleClassInfo.Merge(m, src)
}
func (m *AllowedRuleClassInfo) XXX_Size() int {
	return xxx_messageInfo_AllowedRuleClassInfo.Size(m)
}
func (m *AllowedRuleClassInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedRuleClassInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedRuleClassInfo proto.InternalMessageInfo

func (m *AllowedRuleClassInfo) GetPolicy() AllowedRuleClassInfo_AllowedRuleClasses {
	if m != nil && m.Policy != nil {
		return *m.Policy
	}
	return AllowedRuleClassInfo_ANY
}

func (m *AllowedRuleClassInfo) GetAllowedRuleClass() []string {
	if m != nil {
		return m.AllowedRuleClass
	}
	return nil
}

// This message represents a single attribute of a single rule.
// See docs.bazel.build/versions/master/skylark/lib/attr.html.
type AttributeDefinition struct {
	Name                 *string                  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type                 *Attribute_Discriminator `protobuf:"varint,2,req,name=type,enum=blaze_query.Attribute_Discriminator" json:"type,omitempty"`
	Mandatory            *bool                    `protobuf:"varint,3,opt,name=mandatory" json:"mandatory,omitempty"`
	AllowedRuleClasses   *AllowedRuleClassInfo    `protobuf:"bytes,4,opt,name=allowed_rule_classes,json=allowedRuleClasses" json:"allowed_rule_classes,omitempty"`
	Documentation        *string                  `protobuf:"bytes,5,opt,name=documentation" json:"documentation,omitempty"`
	AllowEmpty           *bool                    `protobuf:"varint,6,opt,name=allow_empty,json=allowEmpty" json:"allow_empty,omitempty"`
	AllowSingleFile      *bool                    `protobuf:"varint,7,opt,name=allow_single_file,json=allowSingleFile" json:"allow_single_file,omitempty"`
	Default              *AttributeValue          `protobuf:"bytes,9,opt,name=default" json:"default,omitempty"`
	Executable           *bool                    `protobuf:"varint,10,opt,name=executable" json:"executable,omitempty"`
	Configurable         *bool                    `protobuf:"varint,11,opt,name=configurable" json:"configurable,omitempty"`
	Nodep                *bool                    `protobuf:"varint,12,opt,name=nodep" json:"nodep,omitempty"`
	CfgIsHost            *bool                    `protobuf:"varint,13,opt,name=cfg_is_host,json=cfgIsHost" json:"cfg_is_host,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AttributeDefinition) Reset()         { *m = AttributeDefinition{} }
func (m *AttributeDefinition) String() string { return proto.CompactTextString(m) }
func (*AttributeDefinition) ProtoMessage()    {}
func (*AttributeDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{17}
}

func (m *AttributeDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeDefinition.Unmarshal(m, b)
}
func (m *AttributeDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeDefinition.Marshal(b, m, deterministic)
}
func (m *AttributeDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeDefinition.Merge(m, src)
}
func (m *AttributeDefinition) XXX_Size() int {
	return xxx_messageInfo_AttributeDefinition.Size(m)
}
func (m *AttributeDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeDefinition proto.InternalMessageInfo

func (m *AttributeDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AttributeDefinition) GetType() Attribute_Discriminator {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Attribute_INTEGER
}

func (m *AttributeDefinition) GetMandatory() bool {
	if m != nil && m.Mandatory != nil {
		return *m.Mandatory
	}
	return false
}

func (m *AttributeDefinition) GetAllowedRuleClasses() *AllowedRuleClassInfo {
	if m != nil {
		return m.AllowedRuleClasses
	}
	return nil
}

func (m *AttributeDefinition) GetDocumentation() string {
	if m != nil && m.Documentation != nil {
		return *m.Documentation
	}
	return ""
}

func (m *AttributeDefinition) GetAllowEmpty() bool {
	if m != nil && m.AllowEmpty != nil {
		return *m.AllowEmpty
	}
	return false
}

func (m *AttributeDefinition) GetAllowSingleFile() bool {
	if m != nil && m.AllowSingleFile != nil {
		return *m.AllowSingleFile
	}
	return false
}

func (m *AttributeDefinition) GetDefault() *AttributeValue {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *AttributeDefinition) GetExecutable() bool {
	if m != nil && m.Executable != nil {
		return *m.Executable
	}
	return false
}

func (m *AttributeDefinition) GetConfigurable() bool {
	if m != nil && m.Configurable != nil {
		return *m.Configurable
	}
	return false
}

func (m *AttributeDefinition) GetNodep() bool {
	if m != nil && m.Nodep != nil {
		return *m.Nodep
	}
	return false
}

func (m *AttributeDefinition) GetCfgIsHost() bool {
	if m != nil && m.CfgIsHost != nil {
		return *m.CfgIsHost
	}
	return false
}

// An AttributeValue represents the value of an attribute.
// A single field, determined by the attribute type, is populated.
//
// It is used only for AttributeDefinition.default. Attribute and
// SelectorEntry do their own thing for unfortunate historical reasons.
type AttributeValue struct {
	Int                  *int32                      `protobuf:"varint,1,opt,name=int" json:"int,omitempty"`
	String_              *string                     `protobuf:"bytes,2,opt,name=string" json:"string,omitempty"`
	Bool                 *bool                       `protobuf:"varint,3,opt,name=bool" json:"bool,omitempty"`
	List                 []*AttributeValue           `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
	Dict                 []*AttributeValue_DictEntry `protobuf:"bytes,5,rep,name=dict" json:"dict,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AttributeValue) Reset()         { *m = AttributeValue{} }
func (m *AttributeValue) String() string { return proto.CompactTextString(m) }
func (*AttributeValue) ProtoMessage()    {}
func (*AttributeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{18}
}

func (m *AttributeValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeValue.Unmarshal(m, b)
}
func (m *AttributeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeValue.Marshal(b, m, deterministic)
}
func (m *AttributeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeValue.Merge(m, src)
}
func (m *AttributeValue) XXX_Size() int {
	return xxx_messageInfo_AttributeValue.Size(m)
}
func (m *AttributeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeValue proto.InternalMessageInfo

func (m *AttributeValue) GetInt() int32 {
	if m != nil && m.Int != nil {
		return *m.Int
	}
	return 0
}

func (m *AttributeValue) GetString_() string {
	if m != nil && m.String_ != nil {
		return *m.String_
	}
	return ""
}

func (m *AttributeValue) GetBool() bool {
	if m != nil && m.Bool != nil {
		return *m.Bool
	}
	return false
}

func (m *AttributeValue) GetList() []*AttributeValue {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AttributeValue) GetDict() []*AttributeValue_DictEntry {
	if m != nil {
		return m.Dict
	}
	return nil
}

type AttributeValue_DictEntry struct {
	Key                  *string         `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                *AttributeValue `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AttributeValue_DictEntry) Reset()         { *m = AttributeValue_DictEntry{} }
func (m *AttributeValue_DictEntry) String() string { return proto.CompactTextString(m) }
func (*AttributeValue_DictEntry) ProtoMessage()    {}
func (*AttributeValue_DictEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{18, 0}
}

func (m *AttributeValue_DictEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeValue_DictEntry.Unmarshal(m, b)
}
func (m *AttributeValue_DictEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeValue_DictEntry.Marshal(b, m, deterministic)
}
func (m *AttributeValue_DictEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeValue_DictEntry.Merge(m, src)
}
func (m *AttributeValue_DictEntry) XXX_Size() int {
	return xxx_messageInfo_AttributeValue_DictEntry.Size(m)
}
func (m *AttributeValue_DictEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeValue_DictEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeValue_DictEntry proto.InternalMessageInfo

func (m *AttributeValue_DictEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *AttributeValue_DictEntry) GetValue() *AttributeValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type RuleDefinition struct {
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Only contains documented attributes
	Attribute     []*AttributeDefinition `protobuf:"bytes,2,rep,name=attribute" json:"attribute,omitempty"`
	Documentation *string                `protobuf:"bytes,3,opt,name=documentation" json:"documentation,omitempty"`
	// Only for build extensions: label to file that defines the extension
	Label                *string  `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleDefinition) Reset()         { *m = RuleDefinition{} }
func (m *RuleDefinition) String() string { return proto.CompactTextString(m) }
func (*RuleDefinition) ProtoMessage()    {}
func (*RuleDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{19}
}

func (m *RuleDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleDefinition.Unmarshal(m, b)
}
func (m *RuleDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleDefinition.Marshal(b, m, deterministic)
}
func (m *RuleDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleDefinition.Merge(m, src)
}
func (m *RuleDefinition) XXX_Size() int {
	return xxx_messageInfo_RuleDefinition.Size(m)
}
func (m *RuleDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_RuleDefinition proto.InternalMessageInfo

func (m *RuleDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RuleDefinition) GetAttribute() []*AttributeDefinition {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *RuleDefinition) GetDocumentation() string {
	if m != nil && m.Documentation != nil {
		return *m.Documentation
	}
	return ""
}

func (m *RuleDefinition) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

type BuildLanguage struct {
	// Only contains documented rule definitions
	Rule                 []*RuleDefinition `protobuf:"bytes,1,rep,name=rule" json:"rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BuildLanguage) Reset()         { *m = BuildLanguage{} }
func (m *BuildLanguage) String() string { return proto.CompactTextString(m) }
func (*BuildLanguage) ProtoMessage()    {}
func (*BuildLanguage) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bdd0ec91f27e80, []int{20}
}

func (m *BuildLanguage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildLanguage.Unmarshal(m, b)
}
func (m *BuildLanguage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildLanguage.Marshal(b, m, deterministic)
}
func (m *BuildLanguage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildLanguage.Merge(m, src)
}
func (m *BuildLanguage) XXX_Size() int {
	return xxx_messageInfo_BuildLanguage.Size(m)
}
func (m *BuildLanguage) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildLanguage.DiscardUnknown(m)
}

var xxx_messageInfo_BuildLanguage proto.InternalMessageInfo

func (m *BuildLanguage) GetRule() []*RuleDefinition {
	if m != nil {
		return m.Rule
	}
	return nil
}

func init() {
	proto.RegisterEnum("blaze_query.FilesetEntry_SymlinkBehavior", FilesetEntry_SymlinkBehavior_name, FilesetEntry_SymlinkBehavior_value)
	proto.RegisterEnum("blaze_query.Attribute_Discriminator", Attribute_Discriminator_name, Attribute_Discriminator_value)
	proto.RegisterEnum("blaze_query.Attribute_Tristate", Attribute_Tristate_name, Attribute_Tristate_value)
	proto.RegisterEnum("blaze_query.Target_Discriminator", Target_Discriminator_name, Target_Discriminator_value)
	proto.RegisterEnum("blaze_query.AllowedRuleClassInfo_AllowedRuleClasses", AllowedRuleClassInfo_AllowedRuleClasses_name, AllowedRuleClassInfo_AllowedRuleClasses_value)
	proto.RegisterType((*License)(nil), "blaze_query.License")
	proto.RegisterType((*StringDictEntry)(nil), "blaze_query.StringDictEntry")
	proto.RegisterType((*LabelDictUnaryEntry)(nil), "blaze_query.LabelDictUnaryEntry")
	proto.RegisterType((*LabelListDictEntry)(nil), "blaze_query.LabelListDictEntry")
	proto.RegisterType((*LabelKeyedStringDictEntry)(nil), "blaze_query.LabelKeyedStringDictEntry")
	proto.RegisterType((*StringListDictEntry)(nil), "blaze_query.StringListDictEntry")
	proto.RegisterType((*FilesetEntry)(nil), "blaze_query.FilesetEntry")
	proto.RegisterType((*Attribute)(nil), "blaze_query.Attribute")
	proto.RegisterType((*Attribute_SelectorEntry)(nil), "blaze_query.Attribute.SelectorEntry")
	proto.RegisterType((*Attribute_Selector)(nil), "blaze_query.Attribute.Selector")
	proto.RegisterType((*Attribute_SelectorList)(nil), "blaze_query.Attribute.SelectorList")
	proto.RegisterType((*Rule)(nil), "blaze_query.Rule")
	proto.RegisterType((*RuleSummary)(nil), "blaze_query.RuleSummary")
	proto.RegisterType((*PackageGroup)(nil), "blaze_query.PackageGroup")
	proto.RegisterType((*EnvironmentGroup)(nil), "blaze_query.EnvironmentGroup")
	proto.RegisterType((*SourceFile)(nil), "blaze_query.SourceFile")
	proto.RegisterType((*GeneratedFile)(nil), "blaze_query.GeneratedFile")
	proto.RegisterType((*Target)(nil), "blaze_query.Target")
	proto.RegisterType((*QueryResult)(nil), "blaze_query.QueryResult")
	proto.RegisterType((*AllowedRuleClassInfo)(nil), "blaze_query.AllowedRuleClassInfo")
	proto.RegisterType((*AttributeDefinition)(nil), "blaze_query.AttributeDefinition")
	proto.RegisterType((*AttributeValue)(nil), "blaze_query.AttributeValue")
	proto.RegisterType((*AttributeValue_DictEntry)(nil), "blaze_query.AttributeValue.DictEntry")
	proto.RegisterType((*RuleDefinition)(nil), "blaze_query.RuleDefinition")
	proto.RegisterType((*BuildLanguage)(nil), "blaze_query.BuildLanguage")
}

func init() {
	proto.RegisterFile("onerepo_tools/gitops/build.proto", fileDescriptor_97bdd0ec91f27e80)
}

var fileDescriptor_97bdd0ec91f27e80 = []byte{
	// 2366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xdd, 0x72, 0x1b, 0x49,
	0xf5, 0xff, 0xeb, 0xcb, 0x96, 0x8e, 0xbe, 0xc6, 0x6d, 0xd9, 0x51, 0x9c, 0x8f, 0x55, 0x94, 0xe4,
	0xbf, 0x5e, 0x92, 0x52, 0x2a, 0x26, 0xbb, 0xb5, 0xbb, 0x40, 0x0a, 0x59, 0x9a, 0x38, 0x72, 0xb4,
	0x92, 0x69, 0x49, 0x4b, 0x99, 0x9b, 0xa9, 0xd1, 0xa8, 0x25, 0x77, 0x79, 0x3c, 0x23, 0xa6, 0x67,
	0x42, 0xc4, 0x2d, 0xc5, 0x0d, 0x50, 0x3c, 0x01, 0x55, 0xf0, 0x10, 0x3c, 0x00, 0x6f, 0xc0, 0x35,
	0xc5, 0x9b, 0x70, 0x45, 0xf5, 0xc7, 0x48, 0x33, 0xb6, 0x9c, 0x38, 0x0b, 0xdc, 0x50, 0xdc, 0xa8,
	0xa6, 0x7f, 0x7d, 0xce, 0xe9, 0x3e, 0xa7, 0xcf, 0x57, 0xb7, 0xe0, 0x89, 0xeb, 0x10, 0x8f, 0xcc,
	0x5d, 0xc3, 0x77, 0x5d, 0x9b, 0x3d, 0x9b, 0x51, 0xdf, 0x9d, 0x33, 0xc3, 0xf2, 0x88, 0xe9, 0x13,
	0x63, 0xee, 0xb1, 0x67, 0xe3, 0x80, 0xda, 0x93, 0xc6, 0xdc, 0x73, 0x7d, 0x17, 0xe5, 0xc7, 0xb6,
	0xf9, 0x4b, 0x62, 0xfc, 0x3c, 0x20, 0xde, 0xa2, 0x7e, 0x0c, 0x9b, 0x5d, 0x6a, 0x11, 0x87, 0x11,
	0xf4, 0x00, 0x0a, 0xb6, 0xfc, 0x34, 0xfc, 0xc5, 0x9c, 0x54, 0x13, 0xb5, 0xd4, 0x7e, 0x0e, 0xe7,
	0x15, 0x36, 0x5c, 0xcc, 0x09, 0xba, 0x0b, 0x39, 0xf2, 0xce, 0x22, 0x73, 0x9f, 0xba, 0x4e, 0x35,
	0x29, 0xe6, 0x57, 0x40, 0xfd, 0x2b, 0x28, 0x0f, 0x7c, 0x8f, 0x3a, 0xb3, 0x36, 0xb5, 0x7c, 0xdd,
	0xf1, 0xbd, 0x05, 0xd2, 0x20, 0x75, 0x4e, 0x16, 0xd5, 0x44, 0x2d, 0xb9, 0x9f, 0xc3, 0xfc, 0x13,
	0x55, 0x20, 0xf3, 0xd6, 0xb4, 0x03, 0x52, 0x4d, 0x0a, 0x4c, 0x0e, 0xea, 0x3f, 0x82, 0xed, 0xae,
	0x39, 0x26, 0x36, 0xe7, 0x1c, 0x39, 0xa6, 0xb7, 0xf8, 0x38, 0xf6, 0x1f, 0x02, 0x12, 0xec, 0x5d,
	0xca, 0xfc, 0x1b, 0x2e, 0x9e, 0x5a, 0x71, 0xb7, 0xe0, 0xb6, 0xe0, 0x7e, 0x43, 0x16, 0x64, 0xf2,
	0x2f, 0x68, 0x20, 0x59, 0xbf, 0xdb, 0x1e, 0xfe, 0x9e, 0x84, 0xc2, 0x2b, 0x6a, 0x13, 0x46, 0x14,
	0xe3, 0x2e, 0x6c, 0x30, 0x37, 0xf0, 0x2c, 0xa2, 0x78, 0xd5, 0x08, 0x7d, 0x1f, 0x76, 0x26, 0x84,
	0xf9, 0xd4, 0x31, 0xb9, 0xcd, 0x8d, 0x09, 0xf5, 0x88, 0xe5, 0xbb, 0xde, 0x42, 0xed, 0xa6, 0x12,
	0x99, 0x6c, 0x87, 0x73, 0xe8, 0x21, 0x14, 0xa7, 0x5c, 0xb8, 0x31, 0xf7, 0x08, 0x23, 0x8e, 0x5f,
	0xdd, 0xac, 0x25, 0xf6, 0xb3, 0xb8, 0x20, 0xc0, 0x13, 0x89, 0x21, 0x04, 0x69, 0x3e, 0xae, 0xa6,
	0xc4, 0xbe, 0xc4, 0x37, 0xaa, 0xc2, 0x26, 0x79, 0x67, 0xd9, 0xc1, 0x84, 0x54, 0xd3, 0x02, 0x0e,
	0x87, 0xe8, 0x67, 0xa0, 0xb1, 0xc5, 0x85, 0x4d, 0x9d, 0x73, 0x63, 0x4c, 0xce, 0xcc, 0xb7, 0xd4,
	0xf5, 0xaa, 0x99, 0x5a, 0x62, 0xbf, 0x74, 0xf0, 0x59, 0x23, 0xe2, 0x60, 0x8d, 0xa8, 0x52, 0x8d,
	0x81, 0xe4, 0x38, 0x54, 0x0c, 0x5f, 0xa7, 0x5b, 0xfd, 0x93, 0x53, 0x5c, 0x66, 0x71, 0x98, 0x7b,
	0x22, 0xf3, 0x3d, 0x3a, 0xe7, 0xdb, 0x9d, 0xd2, 0x77, 0xd5, 0x8d, 0x5a, 0x82, 0x7b, 0xa2, 0xc0,
	0x4e, 0x04, 0x54, 0x7f, 0x0a, 0xe5, 0x4b, 0xc2, 0x50, 0x16, 0x84, 0x38, 0x2d, 0x81, 0xca, 0x90,
	0x6f, 0xeb, 0x58, 0x7f, 0xa5, 0x63, 0xbd, 0xd7, 0xd2, 0xb5, 0x64, 0xfd, 0x8f, 0xbb, 0x90, 0x6b,
	0xfa, 0xbe, 0x47, 0xc7, 0x81, 0x4f, 0xb8, 0xa2, 0x8e, 0x79, 0x11, 0x1a, 0x56, 0x7c, 0xa3, 0xe7,
	0x50, 0x21, 0xef, 0xe6, 0x36, 0xb5, 0xa8, 0x6f, 0x2f, 0x0c, 0x36, 0x27, 0x16, 0x9d, 0x52, 0x32,
	0xa9, 0x16, 0x85, 0xa1, 0xb6, 0x57, 0x73, 0x83, 0x70, 0x8a, 0x1f, 0xa4, 0xe3, 0x4e, 0xc8, 0xbc,
	0x5a, 0x11, 0x34, 0x72, 0x80, 0xbe, 0x84, 0xb4, 0x88, 0x1e, 0x7e, 0x1c, 0xa5, 0x83, 0x47, 0x31,
	0x5b, 0x2c, 0xb7, 0xd0, 0x68, 0x53, 0x66, 0x79, 0xf4, 0x82, 0x1f, 0x94, 0xeb, 0x61, 0xc1, 0x81,
	0xee, 0x40, 0x8e, 0x3a, 0xbe, 0x21, 0x9d, 0x23, 0x55, 0x4b, 0xec, 0x67, 0x70, 0x96, 0x3a, 0xfe,
	0xb7, 0x7c, 0x1c, 0x9a, 0xc4, 0x99, 0xa9, 0xf9, 0xcc, 0xca, 0x24, 0xce, 0x4c, 0x92, 0x3c, 0x84,
	0xe2, 0xd8, 0x75, 0x6d, 0x62, 0x3a, 0x8a, 0xa6, 0x24, 0x0f, 0x59, 0x81, 0x92, 0xe8, 0x15, 0x94,
	0x7c, 0x8f, 0x32, 0x9f, 0x27, 0x06, 0x49, 0x55, 0x16, 0x87, 0xf6, 0xc9, 0x35, 0x1b, 0x1d, 0x2a,
	0x62, 0x5c, 0x0c, 0xd9, 0xa4, 0x9c, 0xef, 0xc1, 0x96, 0xda, 0x8f, 0x4d, 0x59, 0xb8, 0xe9, 0x0d,
	0xe1, 0x22, 0x65, 0xb6, 0x8c, 0x03, 0x49, 0xdb, 0x80, 0x4d, 0x95, 0x44, 0x84, 0xdf, 0xe5, 0x0f,
	0x2a, 0xb1, 0xc5, 0x54, 0xfe, 0xc1, 0x21, 0x11, 0x7a, 0xbd, 0x94, 0x3d, 0xa1, 0x56, 0x28, 0x3b,
	0x5b, 0x4b, 0xed, 0xe7, 0x0f, 0xee, 0xc6, 0x38, 0x2f, 0xc5, 0x6a, 0xb8, 0x32, 0x07, 0xe4, 0xca,
	0x47, 0x80, 0xa6, 0xd2, 0xff, 0xa2, 0xdb, 0xcc, 0x09, 0x51, 0xb7, 0xaf, 0x75, 0x53, 0xac, 0x29,
	0xa6, 0x95, 0x0a, 0x18, 0x76, 0x6c, 0x9e, 0x22, 0xa4, 0x98, 0xc8, 0xb6, 0x40, 0xc8, 0x8a, 0x5b,
	0xef, 0x6a, 0x2a, 0xc2, 0xc8, 0x8e, 0x62, 0x52, 0xe6, 0x08, 0x76, 0xa3, 0x26, 0x8c, 0x08, 0xcd,
	0x0b, 0xa1, 0xb5, 0x35, 0xba, 0xc6, 0xa5, 0x6e, 0xb3, 0x18, 0x28, 0xc5, 0x3e, 0x82, 0x12, 0x77,
	0xa3, 0x88, 0xbe, 0x5b, 0xb5, 0xd4, 0x7e, 0x06, 0x17, 0xa8, 0x13, 0x51, 0x68, 0x04, 0xbb, 0x52,
	0x21, 0xb1, 0x6c, 0xc0, 0x53, 0xae, 0xa2, 0xde, 0x5e, 0xb3, 0xf8, 0x9a, 0xdc, 0x8c, 0xb7, 0xed,
	0x18, 0x28, 0xc5, 0x9e, 0xc1, 0x3d, 0x29, 0xf6, 0x9c, 0xe7, 0x52, 0xe3, 0xea, 0x31, 0xee, 0x0a,
	0xe9, 0xff, 0x7f, 0x55, 0xfa, 0xba, 0xe4, 0x8b, 0x6f, 0xdb, 0x6b, 0xa6, 0xe4, 0x4a, 0xaf, 0xa1,
	0xc8, 0x88, 0x2d, 0xf2, 0x9b, 0xd0, 0xb5, 0xba, 0x23, 0x5c, 0xeb, 0xe1, 0x35, 0x7e, 0x3c, 0x50,
	0xb4, 0xdc, 0x02, 0xb8, 0xc0, 0x22, 0x23, 0x74, 0x0c, 0xf5, 0xb6, 0x7e, 0x82, 0xf5, 0x56, 0x73,
	0xa8, 0xb7, 0x63, 0x5b, 0x8e, 0x9a, 0x05, 0xd5, 0x52, 0xfb, 0x05, 0x7c, 0x7f, 0x45, 0xb9, 0xda,
	0xd0, 0x4a, 0xff, 0xbd, 0xbf, 0x6e, 0x42, 0x31, 0x5c, 0x4a, 0xe6, 0xf1, 0x0a, 0x64, 0x84, 0x12,
	0xd5, 0x84, 0x88, 0x58, 0x39, 0x40, 0xfb, 0xa0, 0x51, 0x66, 0x4c, 0xc8, 0xd4, 0x0c, 0xec, 0xd0,
	0x34, 0x9a, 0x08, 0xd7, 0x12, 0x65, 0x6d, 0x09, 0x4b, 0x3d, 0x63, 0x59, 0x21, 0xf9, 0x81, 0xac,
	0x90, 0xba, 0x41, 0x56, 0x48, 0xdf, 0x28, 0x2b, 0x64, 0xfe, 0x97, 0x15, 0xfe, 0xcb, 0xb3, 0x42,
	0xf1, 0xa3, 0xb2, 0x42, 0xf9, 0x3f, 0x9a, 0x15, 0xb6, 0xfe, 0x5d, 0x59, 0xe1, 0x66, 0xb1, 0x5c,
	0xba, 0x49, 0x2c, 0x1f, 0xa7, 0xb3, 0x05, 0xad, 0xb8, 0xf7, 0x87, 0x04, 0x64, 0xc3, 0x88, 0x46,
	0x2f, 0x61, 0x93, 0x38, 0xbe, 0x47, 0x09, 0x13, 0xdd, 0x71, 0xfe, 0xda, 0xfa, 0x1e, 0xcb, 0x01,
	0x38, 0x64, 0xe2, 0xf1, 0x71, 0x66, 0x5e, 0x8e, 0xfb, 0xa4, 0x08, 0xc8, 0xf2, 0x99, 0x19, 0x0f,
	0xfc, 0x47, 0x50, 0x72, 0x5c, 0xe3, 0xc2, 0xf4, 0xad, 0x33, 0x83, 0x78, 0x9e, 0xeb, 0xa9, 0xe8,
	0x2e, 0x38, 0xee, 0x37, 0x1c, 0xd4, 0x39, 0xb6, 0xf7, 0xeb, 0x04, 0x14, 0xa2, 0xb9, 0x6d, 0xd9,
	0x7f, 0x24, 0x44, 0x00, 0x7f, 0x4c, 0xff, 0xf1, 0x03, 0xc8, 0x12, 0x9b, 0x5c, 0x10, 0xc7, 0x67,
	0xa2, 0x37, 0xcd, 0x5f, 0x1b, 0xfe, 0xe1, 0x82, 0x78, 0xc9, 0x50, 0xff, 0x4d, 0x0a, 0x8a, 0x31,
	0xa1, 0x28, 0x0f, 0x9b, 0x9d, 0xde, 0x50, 0x3f, 0xd2, 0xb1, 0x96, 0x40, 0x00, 0x1b, 0x83, 0x21,
	0xee, 0xf4, 0x8e, 0xb4, 0x24, 0xca, 0x41, 0xa6, 0xdb, 0x3c, 0xd4, 0xbb, 0x5a, 0x8a, 0xc3, 0xfd,
	0xd1, 0xf0, 0x64, 0x34, 0xd4, 0xd2, 0xbc, 0x69, 0x93, 0x24, 0x46, 0xb7, 0x33, 0x18, 0x6a, 0x19,
	0x54, 0x02, 0x10, 0x74, 0x72, 0xbc, 0xc1, 0x09, 0x24, 0xb1, 0x04, 0x36, 0x51, 0x05, 0xb4, 0x76,
	0x87, 0xf3, 0x1c, 0x8e, 0x86, 0x9d, 0x7e, 0xcf, 0x18, 0xe8, 0x43, 0x2d, 0xcb, 0xd7, 0xed, 0x76,
	0x5a, 0x7a, 0x6f, 0xa0, 0x6b, 0xb9, 0x88, 0xd0, 0x76, 0xa7, 0x35, 0xd4, 0x00, 0xed, 0x02, 0x7a,
	0xd5, 0xe9, 0xea, 0x03, 0x7d, 0x68, 0xe8, 0xbd, 0x21, 0x3e, 0x95, 0xb2, 0xf2, 0x68, 0x1b, 0xca,
	0xab, 0xc5, 0x24, 0x71, 0x81, 0x2f, 0x10, 0xd9, 0x92, 0x44, 0x8b, 0x7c, 0x81, 0xc3, 0x7e, 0xbf,
	0xab, 0x37, 0x7b, 0x5a, 0x09, 0x15, 0x20, 0x3b, 0xc4, 0x9d, 0xc1, 0xb0, 0x39, 0xd4, 0xb5, 0x32,
	0xd2, 0xa0, 0xa0, 0x74, 0x96, 0x72, 0x35, 0x4e, 0x3c, 0xea, 0xbd, 0xe9, 0xf5, 0x7f, 0xda, 0xd3,
	0x10, 0x97, 0x27, 0x17, 0xe1, 0x92, 0x8c, 0x51, 0xaf, 0x89, 0x4f, 0xb5, 0x6d, 0xb4, 0x05, 0xc5,
	0x81, 0xde, 0xd5, 0x5b, 0xc3, 0xbe, 0xe2, 0xaa, 0xa0, 0x3b, 0x70, 0x4b, 0x12, 0xbe, 0xd1, 0x4f,
	0xf5, 0xb6, 0x11, 0x55, 0x61, 0x07, 0xd5, 0xe0, 0x6e, 0xc4, 0xc7, 0x23, 0x73, 0x4a, 0xe2, 0x56,
	0xfd, 0x31, 0x64, 0xc3, 0x0c, 0x8d, 0x36, 0x20, 0xd9, 0xeb, 0x6b, 0xff, 0x87, 0x36, 0x21, 0x75,
	0xaa, 0x0f, 0xb4, 0x04, 0x6f, 0x93, 0x9b, 0xa3, 0x61, 0x5f, 0x4b, 0x4a, 0x07, 0x3f, 0x4e, 0x67,
	0x35, 0x6d, 0xab, 0xfe, 0xfb, 0x14, 0xa4, 0x71, 0x60, 0xaf, 0x6f, 0x8e, 0xef, 0x01, 0x78, 0x81,
	0x4d, 0x0c, 0xcb, 0x36, 0x19, 0x53, 0x17, 0x8d, 0x1c, 0x47, 0x5a, 0x1c, 0x40, 0x7b, 0x90, 0xb5,
	0x5d, 0x4b, 0x5c, 0x39, 0x94, 0x8f, 0x2e, 0xc7, 0xe8, 0x05, 0xe4, 0xcc, 0xd0, 0x6f, 0xc4, 0x15,
	0x22, 0x7f, 0xb0, 0xbb, 0xde, 0xab, 0xf0, 0x8a, 0x70, 0xb9, 0x20, 0x75, 0xe6, 0x81, 0x5f, 0xcd,
	0xc8, 0x8b, 0x26, 0x47, 0x3a, 0x1c, 0x40, 0x9f, 0x40, 0x5e, 0x4c, 0xbb, 0x81, 0xcf, 0xe7, 0x65,
	0x81, 0x11, 0x1c, 0x7d, 0x81, 0xa0, 0x4f, 0xa1, 0x1c, 0xc6, 0x18, 0x23, 0xbe, 0x4f, 0x9d, 0x59,
	0x75, 0x53, 0x10, 0x95, 0x14, 0x3c, 0x90, 0x28, 0x0f, 0xc8, 0x79, 0x30, 0xb6, 0xa9, 0x65, 0x8c,
	0x17, 0x61, 0x58, 0x56, 0x73, 0x32, 0x20, 0xe5, 0xc4, 0xe1, 0x42, 0x45, 0x25, 0xdf, 0x14, 0x65,
	0x06, 0x3b, 0x5f, 0xd8, 0xa6, 0x77, 0x5e, 0x05, 0x41, 0x94, 0xa3, 0x6c, 0x20, 0x01, 0xd4, 0x84,
	0x7b, 0x6a, 0xce, 0x20, 0xce, 0x5b, 0xea, 0xb9, 0x0e, 0x8f, 0x0c, 0xe3, 0xcc, 0x64, 0x67, 0x86,
	0xe5, 0x4e, 0x48, 0xb5, 0x20, 0x4c, 0xb3, 0xa7, 0x88, 0xf4, 0x15, 0xcd, 0x6b, 0x93, 0x9d, 0xb5,
	0xdc, 0x09, 0xcf, 0x38, 0x59, 0x2d, 0x77, 0x9c, 0xce, 0xe6, 0xb5, 0x42, 0xfd, 0x57, 0x09, 0xc8,
	0xf3, 0x03, 0x19, 0x04, 0x17, 0x17, 0xa6, 0xb7, 0x40, 0x8f, 0x21, 0xcd, 0x15, 0x14, 0xe7, 0x92,
	0x3f, 0xd8, 0x8a, 0xd9, 0x90, 0xd3, 0x61, 0x31, 0x8d, 0x9e, 0x03, 0x4c, 0xc8, 0x9c, 0x38, 0x13,
	0xe2, 0x58, 0x0b, 0x15, 0xc6, 0x6b, 0x88, 0x23, 0x44, 0xef, 0x3b, 0xbe, 0xfa, 0x6f, 0x13, 0x50,
	0x38, 0x31, 0xad, 0x73, 0x73, 0x46, 0x8e, 0x3c, 0x37, 0x98, 0xaf, 0x75, 0x8f, 0x27, 0xb0, 0x65,
	0xb9, 0x8e, 0x6f, 0x52, 0x87, 0x4c, 0x8c, 0xb9, 0xa4, 0x56, 0xb7, 0x5b, 0x6d, 0x39, 0xa1, 0xa4,
	0xa0, 0x17, 0xb0, 0x4b, 0x1d, 0x71, 0x85, 0x5c, 0xd2, 0x1a, 0x33, 0x2e, 0x5a, 0xdd, 0x3b, 0x2b,
	0xe1, 0x6c, 0x74, 0xd9, 0xe3, 0x74, 0x36, 0xad, 0x65, 0xea, 0x63, 0xd0, 0x22, 0x66, 0xbb, 0x7e,
	0x43, 0x35, 0xc8, 0x47, 0x8e, 0x40, 0x6d, 0x25, 0x0a, 0xf1, 0x7b, 0x6d, 0x78, 0xda, 0x72, 0xd9,
	0x70, 0x58, 0xff, 0x73, 0x12, 0x60, 0x20, 0xae, 0xda, 0xbc, 0xf8, 0xaf, 0x15, 0x1f, 0x35, 0x58,
	0xf2, 0x92, 0xbf, 0xdf, 0x07, 0x60, 0xc1, 0x58, 0xe9, 0xa0, 0x64, 0x47, 0x10, 0xde, 0x8e, 0xc5,
	0xb5, 0x96, 0xd7, 0xea, 0xc2, 0x3c, 0x6a, 0xe4, 0xcf, 0x40, 0x7b, 0x4b, 0x19, 0x1d, 0x53, 0x9b,
	0xfa, 0x0b, 0x43, 0xb6, 0x8f, 0x32, 0x08, 0xca, 0x2b, 0x5c, 0xd4, 0x47, 0xae, 0xc8, 0x94, 0x98,
	0x7e, 0xe0, 0x85, 0x7d, 0x56, 0x38, 0x8c, 0xf6, 0x57, 0xd9, 0x9b, 0xf4, 0x57, 0x5f, 0xc0, 0xad,
	0x70, 0x67, 0xea, 0xd0, 0x98, 0xac, 0x3b, 0x4c, 0x05, 0xc4, 0x8e, 0x9a, 0x6e, 0xa9, 0x59, 0x51,
	0x80, 0xd8, 0x71, 0x3a, 0xbb, 0xa9, 0x65, 0xeb, 0x67, 0x50, 0x3c, 0x22, 0x0e, 0xf1, 0x4c, 0x9f,
	0x4c, 0xae, 0x35, 0xdc, 0xa7, 0x50, 0x9e, 0x49, 0x22, 0x5e, 0x96, 0x85, 0x3b, 0xcb, 0x64, 0x52,
	0x5a, 0xc1, 0x22, 0x09, 0xbd, 0xcf, 0x25, 0xff, 0x96, 0x82, 0x8d, 0xa1, 0xe9, 0xcd, 0x88, 0x8f,
	0x3e, 0x5f, 0xd6, 0x3a, 0x7e, 0xd7, 0x7e, 0x10, 0xd3, 0x4f, 0x92, 0xac, 0x2d, 0x74, 0x61, 0x28,
	0x25, 0x85, 0x59, 0xae, 0x0d, 0xa5, 0x2f, 0x21, 0x2f, 0xdf, 0x5c, 0x0c, 0xf5, 0x2c, 0xc2, 0xa9,
	0x6f, 0xc5, 0xdb, 0xaf, 0xa5, 0xa3, 0x60, 0x60, 0x2b, 0xa7, 0x69, 0x42, 0xa8, 0x10, 0x99, 0x48,
	0xe6, 0xb4, 0x60, 0xde, 0x8b, 0x31, 0xc7, 0xec, 0x85, 0x8b, 0xb3, 0x98, 0xf9, 0x5e, 0x5e, 0xf6,
	0x93, 0x8c, 0x90, 0x10, 0x6f, 0x4f, 0xa3, 0x21, 0x72, 0xc9, 0x85, 0x8e, 0x61, 0x2b, 0x9a, 0x85,
	0xa4, 0x8c, 0x0d, 0x21, 0xe3, 0x5e, 0x4c, 0xc6, 0xe5, 0x80, 0xc2, 0x1a, 0xb9, 0x84, 0xf0, 0xb3,
	0x8d, 0x97, 0xf6, 0x2c, 0xa4, 0xf1, 0xa8, 0xab, 0xcb, 0x97, 0x96, 0x41, 0x7f, 0x84, 0x5b, 0xba,
	0xc1, 0xab, 0xaa, 0x96, 0x44, 0x08, 0x4a, 0x47, 0x7a, 0x4f, 0xc7, 0xa2, 0x36, 0x09, 0x2c, 0xc5,
	0x0b, 0xdc, 0x49, 0xb3, 0xf5, 0xa6, 0x79, 0xa4, 0x1b, 0x47, 0xb8, 0x3f, 0x3a, 0xd1, 0xd2, 0x68,
	0x07, 0xb6, 0xf4, 0xde, 0xb7, 0x1d, 0xdc, 0xef, 0x7d, 0xa3, 0xf7, 0x86, 0x0a, 0xce, 0xd4, 0xbf,
	0x86, 0xfc, 0x4f, 0xf8, 0xae, 0x30, 0x61, 0x3c, 0xe3, 0x3e, 0x81, 0x0d, 0x5f, 0x1c, 0xa3, 0xea,
	0xb6, 0xb6, 0xd7, 0x9c, 0x30, 0x56, 0x24, 0xf5, 0xbf, 0x24, 0xa0, 0xd2, 0xb4, 0x6d, 0xf7, 0x17,
	0x64, 0x82, 0xc3, 0xd2, 0xd4, 0x71, 0xa6, 0x2e, 0xea, 0xc2, 0xc6, 0xdc, 0xb5, 0xa9, 0xb5, 0x50,
	0x7e, 0xf2, 0x22, 0x5e, 0x7f, 0xd6, 0xb0, 0x5c, 0x01, 0x09, 0xc3, 0x4a, 0x06, 0x7a, 0x0a, 0xc8,
	0x94, 0xb3, 0x46, 0xac, 0x26, 0x8a, 0x6c, 0x67, 0x5e, 0xe2, 0xab, 0x3f, 0x05, 0x74, 0x55, 0x16,
	0xaf, 0xc5, 0xcd, 0xde, 0xa9, 0x96, 0x40, 0x45, 0xc8, 0x0d, 0x4e, 0xf4, 0x56, 0xe7, 0x55, 0x47,
	0x6f, 0x6b, 0xc9, 0xfa, 0x3f, 0x52, 0xb0, 0xbd, 0xac, 0x87, 0x6d, 0x32, 0xa5, 0x0e, 0x15, 0x49,
	0x65, 0x5d, 0x2c, 0x7d, 0xf7, 0x77, 0xa6, 0xbb, 0x90, 0xbb, 0x30, 0x9d, 0x89, 0x29, 0x5e, 0x0d,
	0x53, 0xb2, 0x8c, 0x2d, 0x01, 0x34, 0x80, 0xca, 0x55, 0xfd, 0x08, 0x53, 0x1e, 0xfc, 0xe0, 0x83,
	0xb6, 0xc3, 0xc8, 0xbc, 0xaa, 0xf0, 0x23, 0x28, 0x4e, 0x5c, 0x2b, 0xe0, 0x2e, 0x25, 0x83, 0x5a,
	0x3e, 0x5f, 0xc5, 0x41, 0x5e, 0xd6, 0x05, 0xaf, 0x41, 0x2e, 0xe6, 0xfe, 0x42, 0x78, 0x6b, 0x16,
	0x83, 0x80, 0x74, 0x8e, 0xf0, 0x6a, 0x2d, 0x09, 0x18, 0x75, 0x66, 0xb6, 0x8a, 0x4b, 0xf9, 0x94,
	0x59, 0x16, 0x13, 0x03, 0x81, 0x8b, 0x00, 0xfa, 0x7c, 0x95, 0xe1, 0x73, 0x62, 0xeb, 0x77, 0xd6,
	0x9b, 0x48, 0x34, 0xdb, 0xcb, 0xf4, 0xcf, 0xf3, 0x37, 0x79, 0x47, 0xac, 0xc0, 0x37, 0xc7, 0x36,
	0x51, 0x45, 0x3e, 0x82, 0xa0, 0x3a, 0x14, 0x2c, 0xd7, 0x99, 0xd2, 0x59, 0xe0, 0x09, 0x8a, 0xbc,
	0xbc, 0x4d, 0x47, 0xb1, 0xd5, 0xc3, 0x60, 0x21, 0xfa, 0x30, 0x78, 0x1f, 0xf2, 0xd6, 0x74, 0x66,
	0x50, 0x66, 0x9c, 0xb9, 0xcc, 0x57, 0x0f, 0x8b, 0x39, 0x6b, 0x3a, 0xeb, 0xb0, 0xd7, 0x2e, 0xf3,
	0xeb, 0xbf, 0x4b, 0x42, 0x29, 0xbe, 0x2b, 0xa4, 0x41, 0x8a, 0x3a, 0xbe, 0x68, 0xe5, 0x33, 0x98,
	0x7f, 0x8a, 0x57, 0x61, 0x71, 0x57, 0x51, 0x85, 0x47, 0x8d, 0xb8, 0x87, 0xf0, 0x0b, 0xbd, 0x3a,
	0x4e, 0xf1, 0x8d, 0x9e, 0x41, 0x5a, 0x3c, 0x8c, 0xc8, 0xae, 0xeb, 0xbd, 0xea, 0x0b, 0x42, 0xf4,
	0x15, 0xa4, 0xf9, 0x55, 0x49, 0x94, 0x9a, 0xfc, 0xc1, 0xe3, 0xf7, 0x30, 0x34, 0x56, 0x97, 0x31,
	0xc1, 0xb2, 0x77, 0x02, 0xb9, 0xf7, 0xbd, 0x79, 0x3f, 0x8f, 0x3e, 0x99, 0x7f, 0x60, 0x2f, 0xea,
	0x41, 0xfc, 0x4f, 0x09, 0x28, 0x71, 0x17, 0xfa, 0x40, 0x18, 0xbc, 0x8c, 0xf6, 0x97, 0xc9, 0x35,
	0x97, 0xd4, 0x35, 0xf1, 0x14, 0xed, 0x34, 0xaf, 0x78, 0x66, 0x6a, 0x9d, 0x67, 0x2e, 0x1f, 0x71,
	0xd2, 0x91, 0x47, 0x9c, 0xfa, 0x8f, 0xa1, 0x78, 0x18, 0x50, 0x7b, 0xd2, 0x35, 0x9d, 0x59, 0xc0,
	0x7b, 0x9b, 0x67, 0xcb, 0x1e, 0xed, 0xaa, 0xc5, 0xe3, 0xba, 0xc8, 0x12, 0x73, 0xf8, 0x05, 0xbc,
	0xb0, 0xdc, 0x8b, 0xc6, 0xcc, 0x75, 0x67, 0x36, 0x69, 0x4c, 0xc8, 0x5b, 0xf1, 0xff, 0x4d, 0x43,
	0xfe, 0x5b, 0x63, 0xd3, 0x71, 0x43, 0xf0, 0x1e, 0xc8, 0x3f, 0x6e, 0xe4, 0xef, 0x81, 0x39, 0xa7,
	0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x91, 0x55, 0x34, 0xf0, 0x19, 0x00, 0x00,
}
